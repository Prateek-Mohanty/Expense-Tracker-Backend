Expense-Tracker-Backend
|---main.py
|---database.py
|---models.py
|---routers
         |---auth.py
         |---expenses.py
|---test
       |---__init__.py
       |---test_example.py

main.py:
from fastapi import FastAPI
from database import engine
import models
from routers import expenses, auth

models.Base.metadata.create_all(bind=engine)

app = FastAPI()

app.include_router(expenses.router)
app.include_router(auth.router)

database.py:
from sqlalchemy import create_engine
from sqlalchemy.orm import declarative_base, sessionmaker

DATABASE_URL = 'mysql+pymysql://root:%40a1b2c3D4@localhost:3306/expense_tracker'

engine = create_engine(DATABASE_URL)

Base = declarative_base()

SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

models.py:
from sqlalchemy import Integer, Column, String, Float, Date, ForeignKey, Boolean
from database import Base

class Expense(Base):
    __tablename__ = 'Expenses'

    id = Column(Integer, primary_key=True, index=True)
    expense_name = Column(String(50), nullable=False)
    amount = Column(Float, nullable=False)
    date = Column(Date, nullable=False)
    owner_expeense_id = Column(Integer, ForeignKey('Users.id'))


class Users(Base):
    __tablename__ = 'Users'
    id = Column(Integer,primary_key=True, index = True)
    user_name = Column(String(40),unique=True) 
    email = Column(String(40), unique=True)
    first_name = Column(String(40))
    last_name = Column(String(40))
    is_active = Column(Boolean, default=True)
    hashed_password = Column(String)

auth.py:
from fastapi import APIRouter, Depends, HTTPException
from datetime import timedelta, datetime, timezone
from passlib.context import CryptContext
from typing import Annotated
from sqlalchemy.orm import Session
from starlette import status
from pydantic import BaseModel
from models import Users
from jose import JWTError, jwt
from fastapi.security import OAuth2PasswordRequestForm, OAuth2PasswordBearer

from database import SessionLocal

router = APIRouter(
    prefix='/auth',
    tags=['Auth']
)

SECRET_KEY = '286cf13ee6113079c8ed37dcfef63dc843605d3b48c46cf94bc99639264d657f'
ALGORITHM = 'HS256'

oauth2_bearer = OAuth2PasswordBearer(tokenUrl='/auth/token')

class User(BaseModel):
    email:str
    username:str
    firstname:str
    lastname:str
    password:str

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

bcrypt_context = CryptContext(schemes=['bcrypt'],deprecated='auto')
db_dependecny = Annotated[Session,Depends(get_db)]

def generate_token(username, user_id, expires:timedelta):
    encode = {'sub':username, 'id':user_id}
    expires = datetime.now(timezone.utc) + expires
    encode.update({'exp':expires})
    return jwt.encode(encode,SECRET_KEY,algorithm=ALGORITHM)

def authenticate_user(username,password,db):
    user = db.query(Users).filter(Users.user_name == username).first()
    if not user:
        return False
    if not bcrypt_context.verify(password, user.hashed_password):
        return False
    return user

def get_current_user(token:Annotated[str,Depends(oauth2_bearer)]):
    try:
        payload = jwt.decode(token,SECRET_KEY,algorithms=[ALGORITHM])
        user_name = payload.get('sub')
        user_id = payload.get('id')
        if user_name is None or user_id is None:
            raise HTTPException(status_code=401, detail='User not authorized')
        return {'username':user_name, 'id':user_id}
    except JWTError:
        raise HTTPException(status_code=401, detail='Unauthorized user')

@router.post('/create_user',status_code=status.HTTP_200_OK)
async def create_new_user(user:User,db:db_dependecny):
    user_model = Users(
        user_name = user.username,
        email = user.email,
        first_name = user.firstname,
        last_name = user.lastname,
        hashed_password = bcrypt_context.hash(user.password),
        is_active = True
    )
    db.add(user_model)
    db.commit()

@router.get('/read_all_users')
async def read_all_users(db:db_dependecny):
    return db.query(Users).all()

@router.post('/token',status_code=status.HTTP_202_ACCEPTED)
async def get_access_token(form_data:Annotated[OAuth2PasswordRequestForm,Depends()],db:db_dependecny):
    user = authenticate_user(form_data.username,form_data.password,db)
    if not user:
        raise HTTPException(status_code=401, detail='Unauthorized user')
    token = generate_token(user.user_name, user.id, timedelta(minutes=20))
    print(f'token: {token}')
    return {'access_token':token, 'token_type':'bearer'}
    
expenses.py:
from fastapi import Depends, HTTPException, Path, APIRouter
from pydantic import BaseModel, Field
from sqlalchemy.orm import Session
from database import SessionLocal, engine
from models import Expense
from typing import Annotated
from starlette import status
from .auth import get_current_user

router = APIRouter(
    prefix = '/expense',
    tags=['Expenses']
)

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

db_dependecny = Annotated[Session,Depends(get_db)]
user_dependency = Annotated[dict,Depends(get_current_user)]

class ExpenseRequest(BaseModel):
    expense_name:str = Field(min_length=3, max_lenth=50)
    amount:float = Field(gt=0)
    date:str = Field(min_length=10)


@router.get("/get_all",status_code=status.HTTP_200_OK)
async def read_expenses(user:user_dependency, db: db_dependecny):
    if user is None:
        raise HTTPException(status_code=401, detail='Unauthorized access blocked')
    return db.query(Expense).filter(Expense.owner_expeense_id == user.get('id')).all()

@router.get('/{expense_id}',status_code=status.HTTP_200_OK)
async def get_expense_by_id(user:user_dependency, db:db_dependecny, expense_id:int = Path(gt=0)):
    if user is None:
        raise HTTPException(status_code=401, detail='Unauthorized access blocked')    
    expense_model = db.query(Expense).filter(Expense.id == expense_id).filter(Expense.owner_expeense_id == user.get('id')).first()
    if expense_model is not None:
        return expense_model
    raise HTTPException(status_code=404,detail="Expense not found.")

@router.post('/create_expense')
async def create_new_expense(user:user_dependency, db:db_dependecny, expenserequest:ExpenseRequest):
    if user is None:
        raise HTTPException(status_code=401, detail='Unauthorized access blocked')
    expense_model = Expense(**expenserequest.model_dump(), owner_expeense_id = user.get('id'))
    db.add(expense_model)
    db.commit()

@router.put('/{expense_id}')
async def update_expense_by_id(user:user_dependency, db:db_dependecny,expense_request:ExpenseRequest,expense_id:int = Path(gt=0)):
    if user is None:
        raise HTTPException(status_code=401, detail='Unauthorized access blocked')
    expense_model = db.query(Expense).filter(Expense.id == expense_id).filter(Expense.owner_expeense_id == user.get('id')).first()
    if expense_model is None:
        raise HTTPException(status_code=404,detail="Expense not found.")
    
    expense_model.amount = expense_request.amount
    expense_model.expense_name = expense_request.expense_name
    expense_model.date = expense_request.date

    db.add(expense_model)
    db.commit()

@router.delete('/{expense_id}',status_code=status.HTTP_204_NO_CONTENT)
async def delete_expense_by_id(user:user_dependency, db:db_dependecny,expense_id:int = Path(gt=0)):
    if user is None:
        raise HTTPException(status_code=401, detail='Unauthorized access blocked')
    expense_model = db.query(Expense).filter(Expense.id == expense_id).filter(Expense.owner_expeense_id == user.get('id')).first()
    if expense_model is None:
        raise HTTPException(status_code=404,detail="Expense not found.")
    db.query(Expense).filter(Expense.id == expense_id).filter(Expense.owner_expeense_id == user.get('id')).delete()
    db.commit()

test_example.py:
from fastapi.testclient import TestClient
from main import app
from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine, text
from database import Base
from routers.auth import get_db, get_current_user
import pytest
from models import Expense
from fastapi import status
from datetime import date

DATABASE_URL = 'sqlite:///./testdb.db'

engine = create_engine(DATABASE_URL,connect_args={'check_same_thread':False})

TestingSession = sessionmaker(autoflush=False, autocommit=False, bind=engine)

Base.metadata.create_all(bind=engine)

def override_get_db():
    db = TestingSession()
    try:
        yield db
    finally:
        db.close()

def override_get_current_user():
    return {'username':'codingwithmetest','id':1}

app.dependency_overrides[get_db] = override_get_db
app.dependency_overrides[get_current_user] = override_get_current_user

client = TestClient(app)

@pytest.fixture
def dummy_user():
    expense = Expense(
        expense_name = 'New Expense', 
        amount = 500, 
        date = date(2024,3,22), 
        owner_expeense_id = 1
    )

    db = TestingSession()
    db.add(expense)
    db.commit()
    yield db
    with engine.connect() as connection:
        connection.execute(text('DELETE FROM Expenses;'))
        connection.commit()


def test_read_all_expenses(dummy_user):
    response = client.get('/expense/get_all')
    assert response.status_code == status.HTTP_200_OK

def test_read_one_expense(dummy_user):
    response = client.get('/expense/{dummy_user.id}')
    assert response.status_code == 200
